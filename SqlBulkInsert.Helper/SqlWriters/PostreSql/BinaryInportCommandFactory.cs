using System;
using System.Text;

namespace SqlBulkInsert.Helper.SqlWriters.PostreSql
{
    public interface IBinaryImportCommandFactory
    {
        string Create<T>(SqlMetadata<T> sqlMetadata);
    }

    public class BinaryImportCommandFactory : IBinaryImportCommandFactory
    {
        public string Create<T>(SqlMetadata<T> sqlMetadata)
        {
            var commandString = new StringBuilder();

            commandString.Append(string.Format("COPY \"{0}\" (", sqlMetadata.TableName));

            for (var i = 0; i < sqlMetadata.AllProperties.Count; i++)
            {
                var property = sqlMetadata.AllProperties[i];

                if (ColumnIsAutoGenerated(sqlMetadata, property))
                    continue;

                commandString.Append(string.Format("\"{0}\"", property.ColumnName));

                if (i != (sqlMetadata.AllProperties.Count - 1))
                {
                    commandString.Append(",");
                }
            }

            commandString.Append(") FROM STDIN BINARY");

            return commandString.ToString();
        }

        private bool ColumnIsAutoGenerated<T>(SqlMetadata<T> sqlMetadata, SqlMetadata<T>.ColumnProperty property)
        {
            if (sqlMetadata.GeneratedIdProperty == null)
                return false;
            return property.ColumnName.Equals(sqlMetadata.GeneratedIdProperty.ColumnName, StringComparison.CurrentCultureIgnoreCase);
        }
    }
}